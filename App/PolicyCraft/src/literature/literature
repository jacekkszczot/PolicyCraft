import json
import logging
import os
import sys
import time
from typing import Dict, List, Optional
from datetime import datetime
from werkzeug.utils import secure_filename

from .literature_processor import LiteratureProcessor
from .quality_validator import LiteratureQualityValidator
from .knowledge_manager import KnowledgeBaseManager

logger = logging.getLogger(__name__)

class LiteratureEngine:
    def __init__(self, upload_path: str = "data/literature", knowledge_base_path: str = "docs/knowledge_base"):
        self.upload_path = upload_path
        self.knowledge_base_path = knowledge_base_path
        os.makedirs(upload_path, exist_ok=True)
        self.processor = LiteratureProcessor(knowledge_base_path)
        self.quality_validator = LiteratureQualityValidator()
        print("Python path:", sys.path)
        print("Before initializing KnowledgeBaseManager")
        try:
            self.knowledge_manager = KnowledgeBaseManager(knowledge_base_path)
            print("KnowledgeBaseManager initialized successfully")
            print("Attempting to load knowledge base from:", knowledge_base_path)
            try:
                with open(knowledge_base_path, "r") as f:
                    json.load(f)
                print("Knowledge base JSON loaded successfully")
            except json.JSONDecodeError as e:
                print(f"JSON error in {knowledge_base_path}: {e}")
                print(f"Line: {e.lineno}, Column: {e.colno}")
                print(f"Text: {e.doc.splitlines()[e.lineno-1] if e.lineno > 0 else }")
                raise
        except Exception as e:
            print("Error with KnowledgeBaseManager:", str(e))
            self.knowledge_manager = None
        self.supported_extensions = {".pdf", ".txt", ".md"}
        self.max_file_size = 50 * 1024 * 1024
        logger.info("Literature Engine initialised successfully")

