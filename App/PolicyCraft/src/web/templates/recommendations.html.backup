{% extends "base.html" %}

{% block title %}Recommendations - PolicyCraft{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero">
    <div class="hero-content">
        <h1 class="hero-title">Policy Recommendations</h1>
        <h2 class="hero-subtitle">Strategic guidance for AI policy implementation</h2>
    </div>
</section>

<div class="recommendations-container">

    {% if data and data.analysis %}
    
    <!-- Analysis Summary Card -->
    <div class="summary-card">
        <h2>üìã Analysis Summary</h2>
        <div class="summary-grid">
            <div class="summary-item">
                <span class="label">Document:</span>
                <span class="value">{{ data.analysis.filename.split('_', 2)[-1] if '_' in data.analysis.filename else data.analysis.filename }}</span>
            </div>
            <div class="summary-item">
                <span class="label">Classification:</span>
                <span class="value classification-badge classification-{{ data.analysis.classification.lower() }}">
                    {{ data.analysis.classification }}
                </span>
            </div>
            <div class="summary-item">
                <span class="label">Generated:</span>
                <span class="value">{{ data.generated_date }}</span>
            </div>
            <div class="summary-item">
                <span class="label">Total Recommendations:</span>
                <span class="value">{{ data.recommendations|length if data.recommendations else 0 }}</span>
            </div>
        </div>
    </div>
    
    <!-- Recommendations Section -->
    <div class="recommendations-section">
        <h2>üí° Strategic Recommendations</h2>
        
        {% if data.recommendations and data.recommendations|length > 0 %}
        <div class="recommendations-grid">
            {% for recommendation in data.recommendations %}
            <div class="recommendation-card">
                <div class="recommendation-header">
                    <h3>{{ recommendation.title if recommendation.title else 'Recommendation ' + loop.index|string }}</h3>
                    {% if recommendation.priority %}
                    <span class="priority priority-{{ recommendation.priority.lower() }}">
                        {{ recommendation.priority }}
                    </span>
                    {% endif %}
                </div>
                
                <div class="recommendation-content">
                    {% if recommendation.description %}
                    <p>{{ recommendation.description }}</p>
                    {% else %}
                    <p>{{ recommendation }}</p>
                    {% endif %}
                </div>
                
                {% if recommendation.implementation_steps %}
                <div class="implementation-steps">
                    <h4>Implementation Steps:</h4>
                    <ul>
                        {% for step in recommendation.implementation_steps %}
                        <li>{{ step }}</li>
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}
                
                {% if recommendation.sources or recommendation.source %}
                <div class="sources">
                    <h4>Sources:</h4>
                    <ul>
                        {% for src in recommendation.sources %}
                        <li>{{ src }}</li>
                        {% endfor %}
                    </ul>
                </div>
                {% endif %}
                
                {% if recommendation.timeframe %}
                <div class="timeframe">
                    <span class="timeframe-label">‚è±Ô∏è Timeframe:</span>
                    <span class="timeframe-value">{{ recommendation.timeframe }}</span>
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
        
        {% else %}
        <!-- No Recommendations State -->
        <div class="no-recommendations">
            <div class="no-rec-icon">üîç</div>
            <h3>No Specific Recommendations Available</h3>
            <p>Our analysis system is still learning from this type of policy document. Here are some general recommendations based on the classification:</p>
            
            <!-- General recommendations based on classification -->
            <div class="general-recommendations">
                {% if data.analysis.classification == 'Restrictive' %}
                <div class="general-rec-card">
                    <h4>Consider Balanced Approach</h4>
                    <p>Your policy appears restrictive. Consider incorporating flexibility for legitimate academic use while maintaining integrity safeguards.</p>
                </div>
                {% elif data.analysis.classification == 'Permissive' %}
                <div class="general-rec-card">
                    <h4>Strengthen Guidelines</h4>
                    <p>Your policy appears permissive. Consider adding clearer guidelines and assessment criteria to maintain academic standards.</p>
                </div>
                {% else %}
                <div class="general-rec-card">
                    <h4>Maintain Balance</h4>
                    <p>Your policy shows a balanced approach. Continue monitoring effectiveness and adjust based on student and faculty feedback.</p>
                </div>
                {% endif %}
                
                <div class="general-rec-card">
                    <h4>Regular Review</h4>
                    <p>Implement regular policy reviews (6-12 months) to adapt to rapidly evolving AI technologies and educational needs.</p>
                </div>
            </div>
        </div>
        {% endif %}
    </div>
    
    <!-- Action Buttons -->
    <div class="actions-section">
        <h2>‚ö° Next Steps</h2>
        <div class="action-buttons">
            <a href="{{ url_for('dashboard') }}" class="btn btn-primary">
                <span class="btn-icon">üìä</span>
                Back to Dashboard
            </a>
            <a href="{{ url_for('upload_file') }}" class="btn btn-secondary">
                <span class="btn-icon">üì§</span>
                Analyse Another Document
            </a>
            <button onclick="exportRecommendations()" class="btn btn-outline">
                 <span class="btn-icon">üíæ</span>
                 Export Recommendations
             </button>
             <button onclick="validateCitations('{{ data.analysis.analysis_id }}')" class="btn btn-secondary">
                 <span class="btn-icon">üîç</span>
                 Validate Citations
             </button>
        </div>
    </div>
    
    {% else %}
    <!-- Error State -->
    <div class="error-state">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h2>No Recommendation Data Available</h2>
        <p>We couldn't load the recommendation data. This might be because:</p>
        <ul>
            <li>The analysis is still processing</li>
            <li>There was an error generating recommendations</li>
            <li>The recommendation system is temporarily unavailable</li>
        </ul>
        <div class="error-actions">
            <a href="{{ url_for('dashboard') }}" class="btn btn-primary">Return to Dashboard</a>
            <a href="{{ url_for('upload_file') }}" class="btn btn-secondary">Try New Analysis</a>
        </div>
    </div>
    {% endif %}
</div>

<style>
.recommendations-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.recommendations-header {
    text-align: center;
    margin-bottom: 3rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 2rem;
    border-radius: 20px;
}

.recommendations-header h1 {
    font-size: 3rem;
    margin-bottom: 0.5rem;
}

.subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
}

.summary-card, .recommendations-section, .actions-section {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    border: 1px solid #e1e8ed;
}

.summary-card h2, .recommendations-section h2, .actions-section h2 {
    color: #2c3e50;
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.summary-grid {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
<<<<<<< HEAD
=======
}

.summary-item {
    padding: 1.2rem 1.5rem;
    background: #f8f9fa;
    border-radius: 10px;
    border-left: 4px solid #3498db;
    transition: all 0.2s ease;
    min-width: 0;
    width: 100%;
    text-align: left;
}

.summary-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    background: #f0f4f8;
>>>>>>> production
}

.summary-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    background: #f8f9fa;
    border-radius: 10px;
    border-left: 4px solid #3498db;
    transition: all 0.2s ease;
    width: 100%;
<<<<<<< HEAD
    box-sizing: border-box;
=======
>>>>>>> production
}

.label {
    font-weight: 600;
    color: #4a5568;
    font-size: 0.95rem;
    white-space: nowrap;
}

.value {
    color: #1a202c;
    font-size: 1.05rem;
    font-weight: 500;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.classification-badge {
    padding: 0.4rem 1rem;
    border-radius: 20px;
    font-weight: bold;
    color: white;
    font-size: 0.9rem;
}

.classification-restrictive { background: #e74c3c; }
.classification-moderate { background: #f39c12; }
.classification-permissive { background: #2ecc71; }

.recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
}

.recommendation-card {
    background: #f8f9fa;
    border-radius: 15px;
    padding: 1.5rem;
    border-left: 4px solid #3498db;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.recommendation-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
}

.recommendation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.recommendation-header h3 {
    color: #2c3e50;
    margin: 0;
    font-size: 1.2rem;
}

.priority {
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: bold;
    color: white;
}

.priority-high { background: #e74c3c; }
.priority-medium { background: #f39c12; }
.priority-low { background: #2ecc71; }

.recommendation-content {
    color: #34495e;
    line-height: 1.6;
    margin-bottom: 1rem;
}

.implementation-steps {
    background: white;
    padding: 1rem;
    border-radius: 10px;
    margin-bottom: 1rem;
}

.implementation-steps h4 {
    color: #2c3e50;
    margin-bottom: 0.5rem;
    font-size: 1rem;
}

.implementation-steps ul {
    margin: 0;
    padding-left: 1.5rem;
}

.implementation-steps li {
    margin-bottom: 0.3rem;
    color: #34495e;
}

.timeframe {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.timeframe-label {
    font-weight: bold;
    color: #7f8c8d;
}

.timeframe-value {
    background: #3498db;
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.9rem;
}

.no-recommendations {
    text-align: center;
    padding: 3rem 2rem;
}

.no-rec-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.6;
}

.no-recommendations h3 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.general-recommendations {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
}

.general-rec-card {
    background: white;
    padding: 1.5rem;
    border-radius: 10px;
    border-left: 4px solid #f39c12;
    text-align: left;
}

.general-rec-card h4 {
    color: #2c3e50;
    margin-bottom: 0.5rem;
}

.action-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
}

.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    border-radius: 25px;
    text-decoration: none;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1rem;
}

.btn-primary {
    background: linear-gradient(45deg, #3498db, #2980b9);
    color: white;
}

.btn-secondary {
    background: linear-gradient(45deg, #95a5a6, #7f8c8d);
    color: white;
}

.btn-outline {
    background: transparent;
    color: #3498db;
    border: 2px solid #3498db;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
}

.btn-icon {
    font-size: 1.2rem;
}

.error-state {
    text-align: center;
    padding: 4rem 2rem;
    background: white;
    border-radius: 15px;
    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
}

.error-icon {
    font-size: 5rem;
    margin-bottom: 1rem;
    opacity: 0.6;
}

.error-state h2 {
    color: #2c3e50;
    margin-bottom: 1rem;
}

.error-state ul {
    text-align: left;
    display: inline-block;
    margin: 1rem 0;
}

.error-actions {
    margin-top: 2rem;
}

@media (max-width: 768px) {
    .recommendations-container {
        padding: 1rem;
    }
    
    .recommendations-header {
        padding: 2rem 1rem;
    }
    
    .recommendations-header h1 {
        font-size: 2rem;
    }
    
    .summary-grid {
        grid-template-columns: 1fr;
    }
    
    .recommendations-grid {
        grid-template-columns: 1fr;
    }
    
    .general-recommendations {
        grid-template-columns: 1fr;
    }
    
    .action-buttons {
        flex-direction: column;
    }
}
</style>

<script>
// Export recommendations function (safe JSON approach)
function exportRecommendations() {
    const analysisInfo = {
        filename: "{{ data.analysis.filename if data and data.analysis else 'Unknown' }}",
        classification: "{{ data.analysis.classification if data and data.analysis else 'Unknown' }}",
        generated_date: "{{ data.generated_date if data else 'Unknown' }}"
    };
    
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "Policy Recommendations Export\n\n";
    csvContent += "Analysis Information\n";
    csvContent += "Filename,Classification,Generated Date\n";
    csvContent += `"${analysisInfo.filename}","${analysisInfo.classification}","${analysisInfo.generated_date}"\n\n`;
    csvContent += "Recommendations\n";
    csvContent += "Title,Description,Priority,Timeframe\n";
    const recs = {{ data.recommendations|tojson|safe }};
    recs.forEach(rec=>{
        const title = rec.title || '';
        const desc = rec.description || '';
        const priority = rec.priority || 'Medium';
        const timeframe = rec.timeframe || 'Not specified';
        csvContent += `"${title.replace(/"/g,'""')}","${desc.replace(/"/g,'""')}","${priority}","${timeframe}"\n`;
    });
    
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", `recommendations_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
</script>

<!-- Citation Validation Modal -->
<div id="validationModal" class="modal" style="display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:1000;align-items:center;justify-content:center;">
  <div class="modal-content" style="background:#fff;padding:1.5rem;border-radius:8px;max-width:600px;width:90%;max-height:80%;overflow:auto;position:relative;">
      <span style="position:absolute;top:10px;right:15px;font-size:1.5rem;cursor:pointer;" onclick="closeModal()">&times;</span>
      <h3>Citation Validation Report</h3>
      <div id="validationResults"></div>
  </div>
</div>

<script>
async function validateCitations(analysisId) {
    try {
        const res = await fetch(`/validate/${analysisId}`);
        if (!res.ok) {
            alert('Server error running validation');
            return;
        }
        
        const data = await res.json();
        const container = document.getElementById('validationResults');
        container.innerHTML = '';
        
        if (data.issues.length === 0) {
            container.innerHTML = '<p>No recommendations found for validation.</p>';
            document.getElementById('validationModal').style.display = 'flex';
            return;
        }
        
        // Create a summary section
        const summaryDiv = document.createElement('div');
        const totalItems = data.issues.length;
        const passedItems = data.issues.filter(item => item.issues.length === 0).length;
        const failedItems = totalItems - passedItems;
        
        summaryDiv.innerHTML = 
            '<div class="validation-summary" style="margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px;">' +
            '<h3 style="margin-top: 0;">Validation Summary</h3>' +
            '<p>Total recommendations: <strong>' + totalItems + '</strong></p>' +
            '<p>Passed: <strong>' + passedItems + '</strong></p>' +
            '<p>Issues found: <strong>' + failedItems + '</strong></p>' +
            '</div>';
        container.appendChild(summaryDiv);
        
        // Create a list of recommendations
        const list = document.createElement('div');
        list.className = 'validation-list';
        
        data.issues.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.style.marginBottom = '15px';
            itemDiv.style.padding = '10px';
            itemDiv.style.borderLeft = '4px solid ' + (item.issues.length === 0 ? '#28a745' : '#ffc107');
            itemDiv.style.backgroundColor = item.issues.length === 0 ? '#f8fff8' : '#fffcf5';
            
            // Title and status
            let html = '' +
                '<div style="font-weight: bold; margin-bottom: 5px;">' +
                (item.issues.length === 0 ? '‚úÖ' : '‚ö†Ô∏è') + ' ' +
                item.title + 
                '</div>';
            
            // Show issues if any
            if (item.issues.length > 0) {
                html += '<div style="margin-left: 20px; margin-bottom: 10px; color: #dc3545;">';
                html += item.issues.join('<br>');
                html += '</div>';
            } else {
                html += '<div style="color: #28a745; margin-left: 20px;">‚úì All citations are valid</div>';
            }
            
            // Show sources with validation status
            if (item.sources && item.sources.length > 0) {
                html += '<div style="margin-top: 10px; margin-left: 20px;">';
                html += '<div style="font-size: 0.9em; color: #6c757d; margin-bottom: 5px;">References:</div>';
                html += '<ul style="margin: 0; padding-left: 20px;">';
                
                item.sources.forEach(source => {
                    const isValid = source.valid;
                    const original = source.original || 'Unknown source';
                    const validated = source.validated || original;
                    const year = source.year ? ' (' + source.year + ')' : '';
                    
                    if (isValid) {
                        html += '<li>' + validated + year + ' <span style="color: #28a745;">‚úì</span></li>';
                    } else {
                        html += '<li>' + original + ' <span style="color: #dc3545;">‚úó Not found in references</span></li>';
                    }
                });
                
                html += '</ul></div>';
            }
            
            itemDiv.innerHTML = html;
            list.appendChild(itemDiv);
        });
        
        container.appendChild(list);
        document.getElementById('validationModal').style.display = 'flex';
    } catch (e) {
        console.error('Validation error:', e);
        alert('Validation failed: ' + (e.message || 'Unknown error'));
    }
}
function closeModal(){document.getElementById('validationModal').style.display='none';}
</script>

{% endblock %}